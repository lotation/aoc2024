package main

import (
	"bufio"
	"flag"
	"fmt"
	"log"
	"os"
	"slices"
	"strconv"
	"strings"
)

type rule struct {
	before int
	after  int
}

type update struct {
	pages []int
	safe  bool
}

func (update *update) checkSafety() {
	(*update).safe = check((*update).pages)
}

func (update update) getMiddlePage() int {
	return update.pages[len(update.pages)/2]
}

func (update *update) order() {
	// bruteforce all possible permutations of the array
	// to find the correct one
	// for _, u := range permutations((*update).pages) {
	// 	if check(u) {
	// 		// found the right permutation
	// 		(*update).pages = u
	// 		return
	// 	}
	// }

	pages := (*update).pages
	ordered := make([]int, len(pages))
	before_count := make([]int, slices.Max(pages)+1)
	after_count := make([]int, slices.Max(pages)+1)

	// find first element
	for _, page := range pages {
		for _, rule := range rules {
			// count how many before occurrences
			if rule.before == page && slices.Contains(pages, rule.after) {
				//before_count[indx]++
				before_count[page]++
			}
			// count how many after occurrences
			if rule.after == page && slices.Contains(pages, rule.before) {
				//after_count[indx]++
				after_count[page]++
			}
		}
	}
	//fmt.Printf("pages %v\n\n", pages)
	//fmt.Printf("before_count %v\n\n", before_count)
	//fmt.Printf("after_count %v\n\n", after_count)

	// fmt.Println("Normal")
	// for indx, page := range pages {
	// 	// increase to differentiate the 0 index from the 0 match
	// 	// before_count[page]++
	// 	// after_count[page]++
	// 	fmt.Printf("%d) %d - %d\n", indx, before_count[page], after_count[page])
	// }
	// fmt.Println()

	//fmt.Println("Normal")
	for indx := 0; indx < len(pages); indx++ {
		before_count[pages[indx]] += 1 // before_count[pages[indx]]++
		after_count[pages[indx]] += 1  // after_count[pages[indx]]++
		//fmt.Printf("%d) %d - %d - %d\n", indx, pages[indx], after_count[pages[indx]], before_count[pages[indx]])
	}
	fmt.Println()

	//fmt.Printf("after_count %v\n\n", after_count)
	for j := 0; j < len(pages); {
		for i := 0; i < len(after_count); i++ {
			//fmt.Printf("j=%d i=%d - after=%d - before=%d\n", j, i, after_count[i], before_count[i])
			if after_count[i] == j+1 {
				ordered[j] = i
				j++
			}
		}
	}
	// for i := 0; i < len(after_count); i++ {
	// 	fmt.Printf("i=%d - after=%d - before=%d\n", i, after_count[i], before_count[i])
	// 	if after_count[i] != 1 {
	// 		ordered[0] = i
	// 	}
	// }

	// after := slices.Clone(after_count)
	// slices.Sort(after)

	// fmt.Printf("after %v\n\n", after)

	// fmt.Println("Sorted")
	// for indx := 0; indx < len(pages); indx++ {
	// 	fmt.Printf("%d) %d - %d\n", indx, before_count[pages[indx]], after_count[pages[indx]])
	// }
	// fmt.Println()

	// after = after[len(after)-len(pages):]

	// tofix
	// for i := 0; i < len(after_count) && i < len(before_count); i++ {
	// 	if before_count[i] != 0 || after_count[i] != 0 {
	// 		fmt.Printf("%d) before=%d - after=%d\n", i, before_count[i], after_count[i])
	// 	}
	// 	if after_count[i]+before_count[i] == len(pages)+1 {
	// 		ordered = append(ordered, i)
	// 	}
	// }
	// fmt.Println()
	// for i := 0; i < len(after); i++ {
	// 	if after[i] != 0 {
	// 		ordered = append(ordered, after[i])
	// 		fmt.Printf("%d) %d - %d\n", i, after[i], ordered[i])
	// 	}
	// }
	// fmt.Println()

	fmt.Printf("ordered pages %v\n\n", ordered)

	fmt.Println()

	// for indx, page := range update.pages {
	// 	temp_updates := update.pages[indx+1:]
	// 	found := 0
	// 	// check if this page can be the first
	// 	for _, rule := range rules {
	// 		if page == rule.before &&
	// 			slices.Contains(temp_updates[found:], rule.after) {
	// 			found++
	// 		}
	// 	}
	// 	if found == len(temp_updates[found:])-1 {
	// 		ordered[indx] = page
	// 	}
	// }
}

var verbose bool = true

func vPrint(format string, args ...interface{}) {
	if verbose {
		fmt.Printf(format, args...)
	}
}

// Rules
var rules []rule

func main() {
	var inputfile string
	flag.StringVar(&inputfile, "input", "input.txt", "path to file containing current day input")
	flag.BoolVar(&verbose, "verbose", true, "enable verbose logging")
	flag.Parse()

	// Open input file
	fp, err := os.Open(inputfile)
	if err != nil {
		log.Fatalf("Error opening input file %s: %v", inputfile, err)
		return
	}
	defer func() {
		if err := fp.Close(); err != nil {
			log.Panic(err)
		}
	}()

	// Rules
	//var rules []rule = nil
	// Updates
	var updates []update = nil
	// flag to know if still parsing rules
	var stillRules bool = true

	// Parse inut file
	scanner := bufio.NewScanner(fp)
	for scanner.Scan() {
		line := scanner.Text()

		// Check if separator was hit
		if line == "" {
			stillRules = false
			continue
		}
		if stillRules {
			// Still parsing rules
			fields := strings.Split(line, "|")
			rules = append(rules, rule{
				before: toInt(fields[0]),
				after:  toInt(fields[1]),
			})
		} else {
			fields := toIntSlice(strings.Split(line, ","))
			updates = append(updates, update{
				pages: fields,
				safe:  false,
			})
		}
	}

	vPrint("Rules:\n%#v\n\n", rules)
	vPrint("Updates:\n%#v\n\n", updates)

	foo := update{[]int{75, 97, 47, 61, 53}, false}
	foo.order()
	foo = update{[]int{61, 13, 29}, false}
	foo.order()
	foo = update{[]int{97, 13, 75, 29, 47}, false}
	foo.order()
	return

	// Sum of all the middle values of valid updates
	var res1 int = 0
	// Sum of all the middle values of invalid updates
	var res2 int = 0

	// For each update check if is safe
	for _, update := range updates {
		// page is correctly first?
		// yes if there are rules that put it before each of the other pages
		vPrint("Running check against update %v:\n", update.pages)
		update.checkSafety()
		if verbose {
			if update.safe {
				vPrint("Update %v is safe\n", update.pages)
			} else {
				vPrint("Update %v is NOT safe\n", update.pages)
			}
		}
		if update.safe {
			res1 += update.getMiddlePage()
		} else {
			vPrint("Ordering update %v ...\n", update.pages)
			update.order()
			// vPrint("Update %v reordered to %v\n", old.pages, update.pages)
			res2 += update.getMiddlePage()
		}
		vPrint("\n\n")
	}

	// Print result
	fmt.Printf("Result 1: %d\n", res1)
	fmt.Printf("Result 2: %d\n", res2)
}

// Check if requested page is before the others
func check(pages []int) bool {
	vPrint("check() called on %v\n", pages)

	// Iterate through all pages except the last one
	for currentStart := 0; currentStart < len(pages)-1; currentStart++ {
		count := 0

		// Check all pages after the current start
		for i := currentStart + 1; i < len(pages); i++ {
			vPrint("%d) trying %d:\n", i, pages[i])
			for _, rule := range rules {
				vPrint("  pages[start=%d]=%d == rule.before=%d - pages[i]=%d - rule.after=%d",
					currentStart, pages[currentStart], rule.before, pages[i], rule.after)
				if pages[currentStart] == rule.before && pages[i] == rule.after {
					count++
					vPrint("  {count=%d}\n", count)
					break
				}
				vPrint("\n")
			}
		}

		// If count matches the number of pages after currentStart, continue to the next start
		if count == len(pages[currentStart:])-1 {
			continue
		}

		// If we reach here, it means the condition was not satisfied
		vPrint("\n")
		return false
	}

	// If we complete the loop without returning false, return true
	vPrint("\n")
	return true
}

// Return all possible permutations of an int slice
func permutations(arr []int) [][]int {
	var helper func([]int, int)
	res := [][]int{}

	helper = func(arr []int, n int) {
		if n == 1 {
			tmp := make([]int, len(arr))
			copy(tmp, arr)
			res = append(res, tmp)
		} else {
			for i := 0; i < n; i++ {
				helper(arr, n-1)
				if n%2 == 1 {
					tmp := arr[i]
					arr[i] = arr[n-1]
					arr[n-1] = tmp
				} else {
					tmp := arr[0]
					arr[0] = arr[n-1]
					arr[n-1] = tmp
				}
			}
		}
	}
	helper(arr, len(arr))
	return res
}

func remove(slice []int, index int) []int {
	if index >= 0 && index < len(slice) {
		ret := make([]int, 0, len(slice)-1)
		ret = append(ret, slice[:index]...)
		return append(ret, slice[index+1:]...)
	} else {
		return slice
	}
}

func toIntSlice(slice []string) []int {
	ints := make([]int, len(slice))
	for i, s := range slice {
		ints[i] = toInt(s)
	}
	return ints
}

func toInt(val string) int {
	num, err := strconv.ParseInt(val, 10, 0)
	if err != nil {
		log.Fatalf("Error converting value %s to uint32: %v.", val, err)
	}
	return int(num)
}
